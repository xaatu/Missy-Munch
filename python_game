import pygame
import random

# INITIALISE
pygame.init()

# INITIALISE SOUND MIXER
pygame.mixer.init()

# SOUND FILES
pygame.mixer.music.load("missymunchnew.wav")
pygame.mixer.music.play(-1)  
coin_sound = pygame.mixer.Sound("coin.wav")
jump_sound = pygame.mixer.Sound("jump1.wav")

# SCREEN SETUP
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Missy Munch")

# CHARACTER IMAGES
cat_images = [
    pygame.image.load("missy1.png").convert_alpha(),
    pygame.image.load("missy2.png").convert_alpha(),
    pygame.image.load("missy3.png").convert_alpha()
]
cat_width, cat_height = 64, 64
cat_images = [pygame.transform.scale(img, (cat_width, cat_height)) for img in cat_images]

# LOAD PLAY BUTTON (AND SCALE)
play_button_images = [
    pygame.image.load("start1.png").convert_alpha(),
    pygame.image.load("start2.png").convert_alpha(),
    pygame.image.load("start3.png").convert_alpha(),
    pygame.image.load("start4.png").convert_alpha(),
    pygame.image.load("start5.png").convert_alpha(),
    pygame.image.load("start6.png").convert_alpha(),
    pygame.image.load("start7.png").convert_alpha()
]
play_button_images = [pygame.transform.scale(img, (screen_width, screen_height)) for img in play_button_images]

# LOAD BACKGROUND IMAGES
background_image = pygame.image.load("sky.png").convert()
background_image = pygame.transform.scale(background_image, (screen_width, screen_height))

# LOAD FLOOR
floor_image_original = pygame.image.load("floor.png").convert_alpha()
floor_width = screen_width
floor_height = 50
floor_image = pygame.transform.scale(floor_image_original, (floor_width, floor_height))

# LOAD SCORE/HISCORE FONTS
score_font = pygame.font.SysFont(None, 30)
hiscore_font = pygame.font.SysFont(None, 30)

# DEFINE COLOURS
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

# DEFINE CATTRIBUTES
cat_x = screen_width // 2 - cat_width // 2
cat_y = screen_height // 2 - cat_height // 2
cat_velocity_y = 0
cat_acceleration = 0.5
cat_frame = 0
cat_animation_speed = 12  # FPS (SAME AS PISKEL)
cat_frame_count = 0

# DEFINE WALLS
wall_width = 50
wall_gap = 200
wall_speed = 5
walls = []

# DEFINE STATE
title_page = True
game_over = False

# INIT GAME VARIABLES
score = 0
hiscore = 0
speed = 4

# CONTROL FRAME RATE
clock = pygame.time.Clock()
FPS = 60

# DEFINE FISH
class Fish:
    def __init__(self, x, y, width, height, images):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.images = images
        self.frame = 0
        self.animation_speed = 12  # FPS
        self.frame_count = 0

    def update_animation(self):
        self.frame_count += 1
        if self.frame_count >= FPS / self.animation_speed:
            self.frame = (self.frame + 1) % len(self.images)
            self.frame_count = 0

    def move(self):
        # FISH LOGIC
        self.x -= speed

    def draw(self, screen):
        # DRAW FISH
        screen.blit(self.images[self.frame], (self.x, self.y))

# LOAD FISH
fish_images = [
    pygame.image.load("fish1.png").convert_alpha(),
    pygame.image.load("fish2.png").convert_alpha(),
    pygame.image.load("fish3.png").convert_alpha()
]
fish_width, fish_height = 50, 50
fish_images = [pygame.transform.scale(img, (fish_width, fish_height)) for img in fish_images]

# CREATE FISH
fish_list = []

# TEXT DRAW FUNCTION
def draw_text(text, font, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

# TITLE PAGE DRAW
def draw_title_page():
    screen.blit(background_image, (0, 0))  # BG IMAGE
    current_frame = (pygame.time.get_ticks() // 100) % len(play_button_images)
    screen.blit(play_button_images[current_frame], (0, 0))

# CHECK IF PLAY IS CLICKED
def is_play_button_clicked(mouse_x, mouse_y):
    button_rect = pygame.Rect(0, 0, screen_width, screen_height)
    return button_rect.collidepoint(mouse_x, mouse_y)

# RESTART GAME
def restart_game():
    global cat_y, cat_velocity_y, walls, score, fish_list
    cat_y = screen_height // 2 - cat_height // 2
    cat_velocity_y = 0
    walls = []
    score = 0
    fish_list = []

# CREATE WALLS + FISH
def create_wall_and_fish():
    top_wall_height = random.randint(100, screen_height - wall_gap - 100)
    bottom_wall_height = screen_height - wall_gap - top_wall_height
    walls.append((screen_width, 0, wall_width, top_wall_height))
    walls.append((screen_width, screen_height - bottom_wall_height, wall_width, bottom_wall_height))
    fish_y = random.randint(50, screen_height - wall_gap - 50)
    fish_list.append(Fish(screen_width + 50, fish_y, fish_width, fish_height, fish_images))

# CHECK IF SPACEBAR IS RELEASED
space_pressed_last_frame = False

# GAME LOOP
while not game_over:
    if title_page:
        draw_title_page()
        pygame.display.update()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                title_page = False
                restart_game()
    else:
        screen.blit(background_image, (0, 0))  

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True

        # GRAVITY DEFINE
        gravity = 0.5

        # IF SPACEBAR NOT PRESSED IN LAST FRAME, SET TO FALSE
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and not space_pressed_last_frame:
            cat_velocity_y = -8  # NEGATIVE VELOCITY TO MOVE UPWARDS
            jump_sound.play()
            space_pressed_last_frame = True
        elif not keys[pygame.K_SPACE]:
            space_pressed_last_frame = False

        # GRAVITY
        cat_velocity_y += gravity

        # VELOCITY
        cat_y += cat_velocity_y

        # DRAW FLOOR
        screen.blit(floor_image, (0, screen_height - floor_height))

        # DRAW CAT ANIMATION
        cat_frame_count += 1
        if cat_frame_count >= FPS / cat_animation_speed:
            cat_frame = (cat_frame + 1) % len(cat_images)
            cat_frame_count = 0

        # DRAW CAT
        screen.blit(cat_images[cat_frame], (cat_x, cat_y))

        # CREATE NEW WALLS/FISH
        if len(walls) == 0 or walls[-1][0] < screen_width - 300:
            create_wall_and_fish()

        # MOVE WALLS AND REMOVE THE ONES NOT IN SCREEN
        for wall in walls[:]:
            wall_x, wall_y, wall_width, wall_height = wall
            wall_x -= speed
            if wall_x + wall_width < 0:
                walls.remove(wall)
            else:
                walls[walls.index(wall)] = (wall_x, wall_y, wall_width, wall_height)
                pygame.draw.rect(screen, BLACK, pygame.Rect(wall_x, wall_y, wall_width, wall_height))

        # UPDATE FISH ANIMATION
        for fish in fish_list:
            fish.update_animation()

        # MOVE/DRAW FISH
        for fish in fish_list[:]:
            fish.move()
            if fish.x + fish.width < 0:
                fish_list.remove(fish)
            else:
                fish.draw(screen)

        # WALL COLLISION
        cat_rect = pygame.Rect(cat_x, cat_y, cat_width, cat_height)
        for wall in walls:
            if pygame.Rect(wall).colliderect(cat_rect):
                game_over = True

        # FISH COLLISION
        for fish in fish_list[:]:
            fish_rect = pygame.Rect(fish.x, fish.y, fish.width, fish.height)
            if cat_rect.colliderect(fish_rect):
                score += 5  # EXTRA POINTS FOR EATING A FISH
                fish_list.remove(fish)
                coin_sound.play()

        # FLOOR HIT OR OFF SCREEN
        if cat_y < 0 or cat_y > screen_height - floor_height - cat_height:
            game_over = True

        # WALL PASS SCORE GOES UP
        if walls and walls[0][0] + wall_width < cat_x:
            score += 1
            walls.pop(0)

        # UPDATE HISCORE IF CURRENT SCORE GOES PAST (ADD WAY TO STORE DATA)
        if score > hiscore:
            hiscore = score

        # DRAW SCORE/HISCORE
        draw_text(f"Score: {score}", score_font, WHITE, 10, 10)
        draw_text(f"Hiscore: {hiscore}", hiscore_font, WHITE, 10, 40)

        pygame.display.update()

        # CONTROL FRAME RATE
        clock.tick(FPS)

        # INCREASE SPEED AS SCORE GOES UP
        if speed < 10:
            speed += 0.001

# GAME OVER
screen.fill(BLACK)
draw_text("Game Over", pygame.font.SysFont(None, 50), WHITE, screen_width // 2 - 150, screen_height // 2 - 50)
draw_text(f"Score: {score}", pygame.font.SysFont(None, 30), WHITE, screen_width // 2 - 60, screen_height // 2)
draw_text(f"Hiscore: {hiscore}", pygame.font.SysFont(None, 30), WHITE, screen_width // 2 - 70, screen_height // 2 + 40)
draw_text("Press SPACE to play again", pygame.font.SysFont(None, 30), WHITE, screen_width // 2 - 180, screen_height // 2 + 100)
pygame.display.update()

# WAIT FOR SPACE TO BE PRESSED TO RESTART
waiting = True
while waiting:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            waiting = False
            game_over = True
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            waiting = False
            title_page = True
            restart_game()

pygame.quit()
